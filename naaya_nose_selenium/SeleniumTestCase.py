import sys
import optparse
import time

from threading import Thread

import unittest
from unittest import TestCase, TestSuite, makeSuite
from nose.plugins import Plugin

from selenium import selenium

from webob.dec import wsgify
from wsgiref.simple_server import make_server, WSGIRequestHandler, ServerHandler

PORT = 8080

@wsgify.middleware
def no_hop_by_hop(req, app):
    response = req.get_response(app)
    del response.headers['Connection']
    return response

def create_user(db, user_id, password, roles):
    import transaction
    app = db.open().root()['Application']
    app.acl_users._doAddUser(user_id, password, roles, [])
    transaction.commit()

class DummyServerHandler(ServerHandler):
    """
    Used to suppress tracebacks of broken pipes.
    """
    def log_exception(self, exc_info):
        pass

class DummyWsgi(WSGIRequestHandler):
    """
    Used to suppress WSGI logging interface and the tracebacks generated by
    broken pipes when browsers are closing the connection.
    """
    def log_message(self, format, *args):
        """
        Do nothing. This will ensure that all accesses will not be logged,
        cluttering the output.
        """
        pass

    def handle(self):
        """
        Handle a single HTTP request.

        Code is taken verbatim from the parent class, changing only the
        handler variable to our own handler
        """
        self.raw_requestline = self.rfile.readline()
        if not self.parse_request(): # An error code has been sent, just exit
            return

        # this is what we changed
        handler = DummyServerHandler(
                self.rfile, self.wfile, self.get_stderr(), self.get_environ())
        # end of changes
        handler.request_handler = self # backpointer for logging
        handler.run(self.server.get_app())

class DummyNaaya(Thread):
    def __init__(self, tzope):
        Thread.__init__(self)
        self.tzope = tzope
        self._stop = False

    def run(self):
        app = self.tzope.wsgi_app
        self.httpd = make_server('127.0.0.1', PORT, no_hop_by_hop(app),
                handler_class=DummyWsgi)
        _cleanup_db_layer, db_layer = self.tzope.db_layer()
        create_user(db_layer, 'admin', 'admin', ['Manager','Administrator'])

        while not self._stop:
            self.httpd.handle_request()

        _cleanup_db_layer()

    def stop(self):
        self._stop = True

    def force_stop(self):
        import socket
        self.httpd.socket.shutdown(socket.SHUT_RD)

class NySeleniumConfig:
    def __init__(self):
        options = optparse.OptionParser()
        self.data = {}
        self.ParseArguments(options)

    def ParseArguments(self, options):
        arg_cpy = sys.argv[:]
        sys.argv = []
        options.add_option('--site', default='http://localhost:%s/'%PORT)
        options.add_option('--browsers', default="*firefox")
        options.add_option('--user', default="admin")
        options.add_option('--password', default="admin")
        parsed_options, arguments = options.parse_args()

        sys.argv = arg_cpy

        browsers = ['firefox', 'chrome', 'ie', 'all']
        param_browsers = parsed_options.browsers.replace("=", "")
        param_browsers = param_browsers.split(" ")

        self.data['site'] = parsed_options.site
        self.data['browsers'] = parsed_options.browsers
        self.data['user'] = parsed_options.user
        self.data['password'] = parsed_options.password

        return parsed_options

class SeleniumTestCase(unittest.TestCase):
    def setUp(self):
        configuration = self.configuration = NySeleniumConfig()
        self.verificationErrors = []
        supported_browsers = [ '*firefox', '*mock', '*firefoxproxy',
                             '*pifirefox', '*chrome', '*iexploreproxy',
                             '*iexplore', '*firefox3', '*safariproxy',
                             '*googlechrome', '*konqueror', '*firefox2',
                             '*safari', '*piiexplore', '*firefoxchrome',
                             '*opera', '*iehta', '*custom']
        browsers = configuration.data['browsers'].split(",")

        if(browsers[0] == '*all'):
            for browser in supported_browsers:
                self.selenium = selenium("localhost", 5555, browser,\
                                         configuration.data['site'])
                self.selenium.start()
        elif((len(browsers) == 1) and (browsers[0] in supported_browsers)):
            self.selenium = selenium("localhost", 5555, browsers[0],\
                                         configuration.data['site'])
            self.selenium.start()
        elif((len(browsers) > 1)):
            for browser in browsers:
                if browser in supported_browsers:
                    self.selenium = selenium("localhost", 5555, browsers[0],\
                                         configuration.data['site'])
                    self.selenium.start()
        else:
            self.verificationErrors.append("Could not start selenium instance")

    def tearDown(self):
        self.selenium.stop()
        self.assertEqual([], self.verificationErrors)

class NaayaSeleniumTestPlugin(Plugin):
    """
    Nose plugin that prepares the environment for a NaayaTestCase to run
    """

    def __init__(self, tzope):
        Plugin.__init__(self)
        self.tzope = tzope
        self.naaya_started = False

    def options(self, parser, env):
        pass

    def configure(self, options, config):
        self.enabled = True

    def prepareTestCase(self, testCase):
        if isinstance(testCase.test, SeleniumTestCase):
            self.naaya_started = True
            self.dummy = DummyNaaya(self.tzope)
            self.dummy.start()

    def afterTest(self, test):
        if self.naaya_started:
            self.naaya_started = False
            self.dummy.stop()
            self.dummy.join(.5)
            if self.dummy.isAlive():
                self.dummy.force_stop()
                self.dummy.join()

